<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>DSA with Dart - Dashboard</title>
  <!-- Basic Meta -->
  <meta name="description" content="Learn Data Structures and Algorithms using Dart. A complete open-source resource for Dart developers.">
  <meta name="author" content="Bhawani Shankar Mahawar">
  <meta name="keywords" content="DSA, Dart, Data Structures, Algorithms, Open Source, Dart Language, Programming, Interview Prep">

  <!-- Open Graph (Facebook, LinkedIn) -->
  <meta property="og:title" content="DSA with Dart - Dashboard">
  <meta property="og:description" content="Learn DSA with Dart. An open-source resource for Dart developers.">
  <meta property="og:type" content="website">
  <meta property="og:url" content="https://dsawithdart.whitecodel.com">
  <meta property="og:image" content="https://dsawithdart.whitecodel.com/images/banner.png">

  <!-- Twitter Card -->
  <meta name="twitter:card" content="https://dsawithdart.whitecodel.com/images/banner.png">
  <meta name="twitter:title" content="DSA with Dart - Dashboard">
  <meta name="twitter:description" content="Learn DSA with Dart. An open-source resource for Dart developers.">
  <meta name="twitter:image" content="https://dsawithdart.whitecodel.com/images/banner.png">
  <meta name="twitter:creator" content="@BhawaniTechDev">

  <!-- Favicon -->
  <link rel="icon" href="https://dsawithdart.whitecodel.com/images/favicon.ico" type="image/x-icon">
  <link rel="apple-touch-icon" href="https://dsawithdart.whitecodel.com/images/banner.png">
  <link rel="stylesheet" href="/css/output.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Fira+Code:wght@400;500&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/night-owl.min.css">
  <style>
    /* Add styles for separate scroll areas */
    body {
      overflow: hidden;
      height: 100vh;
      display: flex;
      flex-direction: column;
    }

    .main-container {
      flex: 1;
      overflow: hidden;
    }

    .content-container {
      height: 100%;
      overflow-y: auto;
    }

    @media (max-width: 767px) {
      .markdown-content pre {
        margin-top: 0 !important;
        border-radius: 0 !important;
      }
    }
  </style>
</head>

<body class="font-sans bg-gray-50">
  <!-- Top Bar -->
  <div class="bg-primary-700 text-white">
    <div class="container mx-auto px-6 py-3">
      <div class="flex flex-col md:flex-row md:items-center md:justify-between">
        <div class="flex items-center justify-between">
          <a href="/" class="font-bold text-xl">DSA with Dart</a>
          <button id="sidebar-toggle" class="md:hidden focus:outline-none">
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
          </button>
        </div>
        <div class="flex flex-col sm:flex-row items-center mt-3 md:mt-0">
          <a href="https://github.com/whitecodel/dsa-with-dart" target="__blank" class="navbar-item flex items-center">
            <svg class="h-4 w-4 mr-1" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
            </svg>
            GitHub
          </a>
          <div class="text-sm font-medium text-primary-100 px-4 py-2">
            Make a pull request if you want to add more
          </div>
          <div class="relative mt-3 sm:mt-0">
            <input id="search-input" type="text" placeholder="Search..." class="bg-primary-800 text-white placeholder-primary-300 rounded-md py-1 px-3 focus:outline-none focus:ring-2 focus:ring-primary-400 w-full sm:w-auto">
            <div id="search-results" class="absolute left-0 right-0 bg-white mt-1 rounded-md shadow-lg z-10 max-h-96 overflow-y-auto hidden"></div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="container mx-auto md:px-4 main-container">
    <div class="flex flex-col md:flex-row h-full">
      <!-- Sidebar (Mobile View - Hidden by default) -->
      <div id="sidebar" class="md:block hidden fixed md:relative inset-0 z-10 transform md:transform-none md:opacity-100 transition-all duration-300 ease-in-out w-64 md:w-72 bg-white md:bg-transparent md:border-r border-gray-200 p-4 overflow-y-auto h-full">
        <div class="flex justify-between md:hidden mb-6">
          <h2 class="text-xl font-bold">Contents</h2>
          <button id="close-sidebar" class="text-gray-500 hover:text-gray-700 focus:outline-none">
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>

        <!-- Sidebar Content -->
        <nav class="h-full overflow-y-auto pb-20">
          <div class="mb-4">
            <a href="/dashboard" class="sidebar-item <%= !selectedPath ? 'sidebar-item-active' : 'sidebar-item-inactive' %>">
              <svg class="mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
              </svg>
              Home
            </a>
          </div>

          <!-- Directory Structure -->
          <div class="space-y-2">
            <% function renderItems(items) { %>
            <% items.forEach(item => { %>
            <% if (item.type === 'directory') { %>
            <div class="directory-item">
              <div class="sidebar-item sidebar-item-inactive flex justify-between" data-path="<%= item.path %>">
                <div class="flex items-center">
                  <svg class="mr-2 h-4 w-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"></path>
                  </svg>
                  <%= item.name %>
                </div>
                <svg class="transform transition-transform h-4 w-4 chevron-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </div>
              <div class="pl-6 mt-1 space-y-1 children-container hidden">
                <% if (item.children && item.children.length > 0) { %>
                <% renderItems(item.children) %>
                <% } %>
              </div>
            </div>
            <% } else { %>
            <a href="/dashboard?path=<%= encodeURIComponent(item.path) %>" class="sidebar-item <%= selectedPath === item.path ? 'sidebar-item-active' : 'sidebar-item-inactive' %> pl-6">
              <svg class="mr-2 h-4 w-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              <%= item.name %>
            </a>
            <% } %>
            <% }); %>
            <% } %>

            <% renderItems(structure) %>
          </div>
        </nav>
      </div>

      <!-- Main Content -->
      <div class="flex-1 content-container md:py-6 px-0 md:px-8">
        <div class="bg-white rounded-lg shadow-sm md:p-6">
          <!-- File content -->
          <div class="relative">
            <div class="absolute top-0 right-0 flex">
              <% if (selectedPath && selectedPath.endsWith('.dart')) { %>
              <button class="copy-code-btn inline-flex items-center p-2 mr-2 text-gray-500 hover:text-blue-600 focus:outline-none" title="Copy Code">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                </svg>
              </button>
              <% } %>
              <% if (selectedPath && selectedPath.endsWith('.dart') && gistId) { %>
              <a href="https://dartpad.dev/?id=<%= gistId %>" target="_blank" class="inline-flex items-center p-2 mr-2 text-gray-500 hover:text-green-600 focus:outline-none" title="Play in DartPad">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
                </svg>
              </a>
              <% } %>
              <a href="/fullscreen?path=<%= selectedPath %>" class="inline-flex items-center p-2 text-gray-500 hover:text-primary-600 focus:outline-none" title="Open in Full Screen" id="fullscreen-link">
                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V6a2 2 0 012-2h2M4 16v2a2 2 0 002 2h2m8-18h2a2 2 0 012 2v2m0 12v2a2 2 0 01-2 2h-2"></path>
                </svg>
              </a>
            </div>
            <div class="markdown-content" id="content-container">
              <%- content %>
            </div>
          </div>

          <!-- Navigation buttons -->
          <div class="mt-8 border-t p-4 flex justify-between" id="navigation-container">
            <% if (prevNext.prev) { %>
            <a href="/dashboard?path=<%= encodeURIComponent(prevNext.prev.path) %>" class="prev-link inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500" data-path="<%= prevNext.prev.path %>">
              <svg class="-ml-1 mr-2 h-5 w-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
              Previous
            </a>
            <% } else { %>
            <div></div>
            <% } %>

            <% if (prevNext.next) { %>
            <a href="/dashboard?path=<%= encodeURIComponent(prevNext.next.path) %>" class="next-link inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500" data-path="<%= prevNext.next.path %>">
              Next
              <svg class="ml-2 -mr-1 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
            <% } else { %>
            <div></div>
            <% } %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Footer -->
  <footer class="bg-white border-t">
    <div class="container mx-auto px-6 py-4">
      <div class="flex flex-col md:flex-row items-center justify-between text-sm text-gray-600">
        <p>Crafted with ❤️ by Bhawani Shankar</p>
        <div class="flex space-x-4 mt-4 sm:mt-0">
          <a href="https://www.linkedin.com/in/bhawanitechdev/?originalSubdomain=in" target="_blank" class="hover:text-primary-600 cursor-pointer">
            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
              <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z" />
            </svg>
          </a>
          <a href="https://www.instagram.com/bhawani_tech_dev/" target="_blank" class="hover:text-primary-600 cursor-pointer">
            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z" />
            </svg>
          </a>
          <a href="https://medium.com/@BhawaniTechDev" target="_blank" class="hover:text-primary-600 cursor-pointer">
            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
              <path d="M2.846 6.887c.03-.295-.083-.586-.303-.784l-2.24-2.7v-.403h6.958l5.378 11.795 4.728-11.795h6.633v.403l-1.916 1.837c-.165.126-.247.333-.213.538v13.498c-.034.204.048.411.213.537l1.871 1.837v.403h-9.412v-.403l1.939-1.882c.19-.19.19-.246.19-.537v-10.91l-5.389 13.688h-.728l-6.275-13.688v9.174c-.052.385.076.774.347 1.052l2.521 3.058v.404h-7.148v-.404l2.521-3.058c.27-.279.39-.67.325-1.052v-10.608z" />
            </svg>
          </a>
        </div>
      </div>
    </div>
    </div>
  </footer>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/dart.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Initialize highlightjs
      function initHighlighting() {
        document.querySelectorAll('pre code').forEach((el) => {
          hljs.highlightElement(el);
        });
      }

      initHighlighting();

      // Set the height of the main container to fill available space
      function adjustHeight() {
        const topBarHeight = document.querySelector('.bg-primary-700').offsetHeight;
        const footerHeight = document.querySelector('footer').offsetHeight;
        const availableHeight = window.innerHeight - topBarHeight - footerHeight;

        document.querySelector('.main-container').style.height = `${availableHeight}px`;
      }

      // Adjust height initially and when window is resized
      adjustHeight();
      window.addEventListener('resize', adjustHeight);

      // Function to dynamically load content
      async function loadFileContent(path) {
        try {
          // Show loading indicator
          document.getElementById('content-container').innerHTML =
            '<div class="flex justify-center items-center h-32"><div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div></div>';

          // Fetch the file content
          const response = await fetch(`/api/file-content?path=${encodeURIComponent(path || '')}`);

          if (!response.ok) {
            throw new Error('Failed to load content');
          }

          const data = await response.json();

          // Update content
          document.getElementById('content-container').innerHTML = data.content;

          // Update navigation buttons
          updateNavigationButtons(data.prevNext);

          // Update fullscreen link
          const fullscreenLink = document.getElementById('fullscreen-link');
          fullscreenLink.href = `/fullscreen?path=${encodeURIComponent(path || '')}`;

          // Update play button if it's a Dart file with a Gist ID
          const actionButtons = fullscreenLink.parentElement;
          const playButton = actionButtons.querySelector('a[title="Play in DartPad"]');



          if (path && path.endsWith('.dart')) {
            // Add copy code button if not exists
            let copyButton = actionButtons.querySelector('button[title="Copy Code"]');
            if (!copyButton) {
              // Create and insert the copy button
              copyButton = document.createElement('button');
              copyButton.className = 'copy-code-btn inline-flex items-center p-2 mr-2 text-gray-500 hover:text-blue-600 focus:outline-none';
              copyButton.title = 'Copy Code';
              copyButton.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                </svg>
              `;
              actionButtons.insertBefore(copyButton, actionButtons.firstChild);
            }

            // Add copy functionality
            copyButton.onclick = function() {
              // Find the code element
              const codeElement = document.querySelector('pre code');
              if (codeElement) {
                // Get the code text
                const codeText = codeElement.textContent;

                // Copy to clipboard
                navigator.clipboard.writeText(codeText).then(() => {
                  // Visual feedback
                  const originalSvg = this.innerHTML;
                  this.innerHTML = `
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                  `;
                  this.classList.remove('text-gray-500');
                  this.classList.add('text-green-600');

                  // Revert after 2 seconds
                  setTimeout(() => {
                    this.innerHTML = originalSvg;
                    this.classList.remove('text-green-600');
                    this.classList.add('text-gray-500');
                  }, 2000);
                }).catch(err => {
                  console.error('Could not copy text: ', err);
                });
              }
            };

            if (data.gistId) {
              if (playButton) {
                playButton.href = `https://dartpad.dev/?id=${data.gistId}`;
              } else {
                // Create and insert the play button
                const newPlayButton = document.createElement('a');
                newPlayButton.href = `https://dartpad.dev/?id=${data.gistId}`;
                newPlayButton.target = '_blank';
                newPlayButton.className = 'inline-flex items-center p-2 mr-2 text-gray-500 hover:text-green-600 focus:outline-none';
                newPlayButton.title = 'Play in DartPad';
                newPlayButton.innerHTML = `
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
                  </svg>
                `;
                const copyButton = actionButtons.querySelector('.copy-code-btn');
                if (copyButton) {
                  actionButtons.insertBefore(newPlayButton, copyButton.nextSibling);
                } else {
                  actionButtons.insertBefore(newPlayButton, fullscreenLink);
                }
              }
            } else if (playButton) {
              // Remove the play button if file is not a Dart file or doesn't have a Gist ID
              playButton.remove();
            }
          } else {
            // Remove copy button if not a Dart file
            const copyButton = actionButtons.querySelector('button[title="Copy Code"]');
            if (copyButton) {
              copyButton.remove();
            }

            // Remove the play button if not a Dart file
            if (playButton) {
              playButton.remove();
            }
          }

          // Update URL without refreshing
          const url = path ? `/dashboard?path=${encodeURIComponent(path)}` : '/dashboard';
          history.pushState({
            path
          }, '', url);

          // Re-initialize syntax highlighting
          initHighlighting();

          // Scroll to top of content
          document.querySelector('.content-container').scrollTop = 0;

          // Mark current file as active in sidebar
          updateActiveSidebarItem(path);
        } catch (error) {
          console.error('Error loading content:', error);
          document.getElementById('content-container').innerHTML =
            '<div class="text-red-500 p-4">Error loading content. Please try again.</div>';
        }
      }

      // Update sidebar active item
      function updateActiveSidebarItem(path) {
        // Remove active class from all items
        document.querySelectorAll('.sidebar-item-active').forEach(item => {
          if (!item.classList.contains('directory-item')) {
            item.classList.remove('sidebar-item-active');
            item.classList.add('sidebar-item-inactive');
          }
        });

        // Add active class to current item
        if (path) {
          // Instead of using querySelector with a complex selector, find the element by iterating
          let activeItem = null;
          const sidebarItems = document.querySelectorAll('.sidebar-item[href^="/dashboard?path="]');

          sidebarItems.forEach(item => {
            const urlParams = new URLSearchParams(item.href.split('?')[1]);
            const itemPath = urlParams.get('path');

            // Compare the decoded paths to ensure exact match
            if (itemPath === path) {
              activeItem = item;
            }
          });

          if (activeItem) {
            activeItem.classList.remove('sidebar-item-inactive');
            activeItem.classList.add('sidebar-item-active');
          } else {
            console.log('No matching sidebar item found for path:', path);
          }
        } else {
          // Home is active when no path
          const homeItem = document.querySelector('.sidebar-item[href="/dashboard"]');
          if (homeItem) {
            homeItem.classList.remove('sidebar-item-inactive');
            homeItem.classList.add('sidebar-item-active');
          }
        }
      }

      // Update navigation buttons
      function updateNavigationButtons(prevNext) {
        const container = document.getElementById('navigation-container');

        if (prevNext.prev) {
          const prevLink = `
            <a href="/dashboard?path=${encodeURIComponent(prevNext.prev.path)}" 
               class="prev-link inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500" 
               data-path="${prevNext.prev.path}">
              <svg class="-ml-1 mr-2 h-5 w-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
              Previous
            </a>
          `;

          if (container.firstElementChild.tagName === 'A') {
            container.firstElementChild.outerHTML = prevLink;
          } else {
            container.firstElementChild.outerHTML = prevLink;
          }
        } else {
          container.firstElementChild.outerHTML = '<div></div>';
        }

        if (prevNext.next) {
          const nextLink = `
            <a href="/dashboard?path=${encodeURIComponent(prevNext.next.path)}" 
               class="next-link inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500" 
               data-path="${prevNext.next.path}">
              Next
              <svg class="ml-2 -mr-1 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          `;

          if (container.lastElementChild.tagName === 'A') {
            container.lastElementChild.outerHTML = nextLink;
          } else {
            container.lastElementChild.outerHTML = nextLink;
          }
        } else {
          container.lastElementChild.outerHTML = '<div></div>';
        }

        // Attach event listeners to new navigation buttons
        attachNavigationListeners();
      }

      // Attach event listeners to navigation buttons
      function attachNavigationListeners() {
        document.querySelectorAll('.prev-link, .next-link').forEach(link => {
          link.addEventListener('click', function(e) {
            e.preventDefault();
            const path = this.getAttribute('data-path');
            loadFileContent(path);
          });
        });
      }

      // Attach event listeners to file links in sidebar
      function attachSidebarListeners() {
        document.querySelectorAll('.sidebar-item[href^="/dashboard?path="]').forEach(link => {
          link.addEventListener('click', function(e) {
            e.preventDefault();
            const urlParams = new URLSearchParams(this.href.split('?')[1]);
            const path = urlParams.get('path');
            loadFileContent(path);
          });
        });

        // Home link
        document.querySelector('.sidebar-item[href="/dashboard"]').addEventListener('click', function(e) {
          e.preventDefault();
          loadFileContent('');
        });
      }

      // Handle browser back/forward buttons
      window.addEventListener('popstate', function(event) {
        const path = event.state?.path || '';
        loadFileContent(path);
      });

      // Get the current selected path from URL and store as initial state
      const urlParams = new URLSearchParams(window.location.search);
      const selectedPath = urlParams.get('path') || '';

      // Initialize listeners
      attachSidebarListeners();
      attachNavigationListeners();

      // Store initial state for browser history
      history.replaceState({
        path: selectedPath
      }, '', window.location.href);

      // Call loadFileContent on initial page load if we have a path
      // or if we're on the homepage (empty path)
      loadFileContent(selectedPath);

      // Mobile sidebar toggle
      document.getElementById('sidebar-toggle').addEventListener('click', () => {
        const sidebar = document.getElementById('sidebar');
        sidebar.classList.toggle('hidden');
        sidebar.classList.toggle('translate-x-0');
      });

      document.getElementById('close-sidebar').addEventListener('click', () => {
        document.getElementById('sidebar').classList.add('hidden');
      });

      // Directory toggle
      document.querySelectorAll('.directory-item > .sidebar-item').forEach(item => {
        item.addEventListener('click', () => {
          const childrenContainer = item.nextElementSibling;
          const chevron = item.querySelector('.chevron-icon');

          childrenContainer.classList.toggle('hidden');
          chevron.classList.toggle('rotate-90');
        });
      });

      // Auto-expand sidebar directories based on selected path
      function expandDirectoriesForPath(path) {
        if (!path) return;

        const pathParts = path.split('/').filter(part => part);
        let currentPath = '';

        // Expand each parent directory in the path
        for (let i = 0; i < pathParts.length - 1; i++) {
          currentPath += (currentPath ? '/' : '') + pathParts[i];
          const dirItem = document.querySelector(`.sidebar-item[data-path="${currentPath}"]`);

          if (dirItem) {
            // Find the children container and expand it if it's hidden
            const childrenContainer = dirItem.nextElementSibling;
            const chevron = dirItem.querySelector('.chevron-icon');

            if (childrenContainer.classList.contains('hidden')) {
              childrenContainer.classList.remove('hidden');
              chevron.classList.add('rotate-90');
            }
          }
        }
      }

      // Expand directories for the current path
      expandDirectoriesForPath(selectedPath);

      // Search functionality
      const searchInput = document.getElementById('search-input');
      const searchResults = document.getElementById('search-results');

      // Function to flatten the directory structure for searching
      function flattenStructure(structure, results = []) {
        structure.forEach(item => {
          if (item.type === 'file') {
            results.push(item);
          }

          if (item.children && item.children.length > 0) {
            flattenStructure(item.children, results);
          }
        });

        return results;
      }

      // Get all searchable files
      const allFiles = flattenStructure(<%- JSON.stringify(structure) %>);

      searchInput.addEventListener('input', () => {
        const query = searchInput.value.toLowerCase().trim();

        if (query === '') {
          searchResults.classList.add('hidden');
          return;
        }

        const filteredResults = allFiles.filter(file =>
          file.name.toLowerCase().includes(query) ||
          file.path.toLowerCase().includes(query)
        );

        searchResults.innerHTML = '';

        if (filteredResults.length === 0) {
          searchResults.innerHTML = '<div class="p-3 text-sm text-gray-500">No results found</div>';
        } else {
          filteredResults.slice(0, 10).forEach(file => {
            const item = document.createElement('a');
            item.href = `/dashboard?path=${encodeURIComponent(file.path)}`;
            item.className = 'block p-2 hover:bg-gray-100 text-sm';

            // Format path for display
            const pathParts = file.path.split('/');
            const fileName = pathParts.pop();
            const directory = pathParts.join('/');

            item.innerHTML = `
                            <div class="font-medium">${fileName}</div>
                            <div class="text-xs text-gray-500">${directory}/</div>
                        `;

            searchResults.appendChild(item);
          });
        }

        searchResults.classList.remove('hidden');
      });

      // Hide search results when clicking outside
      document.addEventListener('click', (e) => {
        if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
          searchResults.classList.add('hidden');
        }
      });
    });
  </script>
</body>

</html>