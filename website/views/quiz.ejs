<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>DSA with Dart - Quiz</title>
  <meta name="description" content="Test your Data Structures and Algorithms knowledge with Dart programming quizzes">
  <meta name="author" content="Bhawani Shankar Mahawar">
  <link rel="icon" href="/images/favicon.ico" type="image/x-icon">
  <link rel="stylesheet" href="/css/output.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Inter', sans-serif;
    }
  </style>
</head>

<body class="bg-gray-50 min-h-screen">
  <!-- Top Bar -->
  <header class="bg-primary-700 text-white shadow-md">
    <div class="container mx-auto px-4 py-3">
      <div class="flex justify-between items-center">
        <div class="flex items-center">
          <a href="/" class="flex items-center">
            <img src="/images/logo.png" alt="Logo" class="h-8 w-8 mr-2">
            <span class="font-bold text-xl">DSA with Dart</span>
          </a>
        </div>
        <nav class="flex items-center">
          <a href="/dashboard" class="text-white hover:text-primary-200 ml-4 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
            </svg>
            <span class="ml-1 hidden md:inline">Dashboard</span>
          </a>
        </nav>
      </div>
    </div>
  </header>

  <main class="container mx-auto px-4 py-6">
    <% if (!locals.quizType) { %>
    <!-- Quiz Selection View -->
    <div class="max-w-4xl mx-auto">
      <h1 class="text-3xl font-bold text-gray-800 mb-6">Select a Quiz Category</h1>
      <p class="text-gray-600 mb-8">Test your knowledge of Data Structures and Algorithms with Dart programming language
      </p>

      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <!-- Quiz categories -->
        <a href="/quiz?type=easy" class="quiz-card bg-white rounded-lg shadow-md p-6 border border-gray-200">
          <div class="h-12 w-12 rounded-lg flex items-center justify-center mb-4 bg-green-100">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <h2 class="text-xl font-semibold text-gray-800 mb-2">Easy</h2>
          <p class="text-gray-600">Beginner-friendly questions about fundamental algorithms and data structures</p>
        </a>

        <a href="/quiz?type=medium" class="quiz-card bg-white rounded-lg shadow-md p-6 border border-gray-200">
          <div class="h-12 w-12 rounded-lg flex items-center justify-center mb-4 bg-yellow-100">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-yellow-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <h2 class="text-xl font-semibold text-gray-800 mb-2">Medium</h2>
          <p class="text-gray-600">Intermediate level questions that test your understanding of more complex concepts
          </p>
        </a>

        <a href="/quiz?type=hard" class="quiz-card bg-white rounded-lg shadow-md p-6 border border-gray-200">
          <div class="h-12 w-12 rounded-lg flex items-center justify-center mb-4 bg-red-100">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
          </div>
          <h2 class="text-xl font-semibold text-gray-800 mb-2">Hard</h2>
          <p class="text-gray-600">Advanced questions that challenge your algorithmic problem-solving skills</p>
        </a>
      </div>
    </div>
    <% } else { %>
    <!-- Quiz Questions View -->
    <div class="max-w-4xl mx-auto" id="quiz-container">
      <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl font-bold text-gray-800"><%= quizType.charAt(0).toUpperCase() + quizType.slice(1) %> Quiz
        </h1>
        <div class="flex items-center space-x-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <span id="time-remaining" class="font-medium">00:00</span>
        </div>
      </div>

      <!-- Progress bar -->
      <div class="w-full bg-gray-200 rounded-full mb-6">
        <div id="progress-bar" class="bg-primary-600 rounded-full progress-bar" style="width: 0%"></div>
      </div>

      <!-- Question display -->
      <div id="question-container" class="bg-white rounded-lg shadow-md p-6 mb-6">
        <h2 id="question-title" class="text-xl font-semibold text-gray-800 mb-4"></h2>
        <p id="question-text" class="text-gray-700 mb-6"></p>
        <div id="options-container" class="space-y-2"></div>
      </div>

      <!-- Navigation buttons -->
      <div class="flex justify-between">
        <button id="prev-btn" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 disabled:opacity-50 disabled:cursor-not-allowed">
          Previous
        </button>
        <div class="flex space-x-2">
          <span id="question-number" class="self-center text-gray-600">Question 1 of <%= questions.length %></span>
        </div>
        <button id="next-btn" class="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
          Next
        </button>
      </div>
    </div>

    <!-- Results Modal (hidden initially) -->
    <div id="results-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
      <div class="bg-white rounded-lg p-8 max-w-md mx-4 shadow-xl">
        <h3 class="text-2xl font-bold text-gray-900 mb-4">Quiz Results</h3>
        <p id="score-display" class="text-xl font-medium text-gray-700 mb-4"></p>
        <div id="result-details" class="space-y-4 mb-6 max-h-96 overflow-y-auto"></div>
        <div class="flex justify-between">
          <a href="/quiz" class="px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-800 rounded-lg transition duration-200">
            Back to Categories
          </a>
          <button id="retry-btn" class="px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition duration-200">
            Retry Quiz
          </button>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // Get quiz data from server
        const quizData = <%- JSON.stringify(questions) %>;
        let currentQuestionIndex = 0;
        let userAnswers = new Array(quizData.length).fill(null);
        let quizStarted = false;
        let quizEnded = false;
        let timerInterval;
        let timeRemaining;

        const questionContainer = document.getElementById('question-container');
        const questionTitle = document.getElementById('question-title');
        const questionText = document.getElementById('question-text');
        const optionsContainer = document.getElementById('options-container');
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        const progressBar = document.getElementById('progress-bar');
        const questionNumber = document.getElementById('question-number');
        const timeRemainingElement = document.getElementById('time-remaining');
        const resultsModal = document.getElementById('results-modal');
        const scoreDisplay = document.getElementById('score-display');
        const resultDetails = document.getElementById('result-details');
        const retryBtn = document.getElementById('retry-btn');

        // Initialize quiz
        function initializeQuiz() {
          if (quizData.length > 0) {
            displayQuestion(0);
            updateNavButtons();
            prevBtn.disabled = true;
            startQuiz();
          }
        }

        // Start quiz and timer
        function startQuiz() {
          if (!quizStarted) {
            quizStarted = true;
            // Set timer based on current question's time limit
            resetTimer();
            startTimer();
          }
        }

        // Display question
        function displayQuestion(index) {
          const question = quizData[index];
          questionTitle.textContent = question.title;
          questionText.textContent = question.question;
          questionNumber.textContent = `Question ${index + 1} of ${quizData.length}`;

          // Update progress bar
          progressBar.style.width = `${((index + 1) / quizData.length) * 100}%`;

          // Clear options
          optionsContainer.innerHTML = '';

          // Add options
          question.options.forEach((option, optionIndex) => {
            const optionBtn = document.createElement('button');
            optionBtn.className = 'option-button w-full text-left p-4 border rounded-md focus:outline-none';

            // If user already answered this question
            if (userAnswers[index] === optionIndex) {
              optionBtn.classList.add('selected');
            }

            optionBtn.innerHTML = `
                <div class="flex items-start">
                  <div class="flex-shrink-0 h-6 w-6 rounded-full border-2 flex items-center justify-center mr-3 ${userAnswers[index] === optionIndex ? 'border-primary-600 bg-primary-100' : 'border-gray-300'}">
                    <span class="text-sm font-medium">${String.fromCharCode(65 + optionIndex)}</span>
                  </div>
                  <div class="text-gray-700">${option}</div>
                </div>
              `;

            optionBtn.addEventListener('click', () => selectOption(optionIndex));

            optionsContainer.appendChild(optionBtn);
          });

          currentQuestionIndex = index;
          resetTimer();
          startTimer();
        }

        // Select option
        function selectOption(optionIndex) {
          userAnswers[currentQuestionIndex] = optionIndex;

          // Update UI
          document.querySelectorAll('.option-button').forEach((btn, idx) => {
            if (idx === optionIndex) {
              btn.classList.add('selected');
            } else {
              btn.classList.remove('selected');
            }
          });

          // If last question, change Next button to Finish
          if (currentQuestionIndex === quizData.length - 1) {
            nextBtn.textContent = 'Finish';
          }
        }

        // Update navigation buttons
        function updateNavButtons() {
          prevBtn.disabled = currentQuestionIndex === 0;
          nextBtn.textContent = currentQuestionIndex === quizData.length - 1 ? 'Finish' : 'Next';
        }

        // Timer functions
        function resetTimer() {
          clearInterval(timerInterval);
          timeRemaining = quizData[currentQuestionIndex].timeLimit * 60; // Convert minutes to seconds
          updateTimerDisplay();
        }

        function startTimer() {
          timerInterval = setInterval(() => {
            timeRemaining--;
            updateTimerDisplay();

            if (timeRemaining <= 0) {
              clearInterval(timerInterval);
              // Auto-move to next question or finish quiz if time's up
              if (currentQuestionIndex < quizData.length - 1) {
                goToNextQuestion();
              } else {
                finishQuiz();
              }
            }
          }, 1000);
        }

        function updateTimerDisplay() {
          const minutes = Math.floor(timeRemaining / 60);
          const seconds = timeRemaining % 60;
          timeRemainingElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

          // Change color when timer is running low
          if (timeRemaining <= 10) {
            timeRemainingElement.classList.add('text-red-600');
          } else {
            timeRemainingElement.classList.remove('text-red-600');
          }
        }

        // Navigate to previous question
        function goToPrevQuestion() {
          if (currentQuestionIndex > 0) {
            displayQuestion(currentQuestionIndex - 1);
            updateNavButtons();
          }
        }

        // Navigate to next question
        function goToNextQuestion() {
          if (currentQuestionIndex < quizData.length - 1) {
            displayQuestion(currentQuestionIndex + 1);
            updateNavButtons();
          } else {
            finishQuiz();
          }
        }

        // Finish quiz
        function finishQuiz() {
          if (quizEnded) return;

          quizEnded = true;
          clearInterval(timerInterval);

          // Calculate score
          const score = calculateScore();
          const percentage = Math.round((score / quizData.length) * 100);

          // Display results
          scoreDisplay.textContent = `You scored ${score} out of ${quizData.length} (${percentage}%)`;

          // Show detailed results
          resultDetails.innerHTML = '';
          quizData.forEach((question, index) => {
            const userAnswer = userAnswers[index];
            const isCorrect = userAnswer === question.correctAnswer;

            const resultItem = document.createElement('div');
            resultItem.className = `p-4 rounded-md ${isCorrect ? 'bg-green-50' : 'bg-red-50'}`;

            resultItem.innerHTML = `
                <p class="font-medium ${isCorrect ? 'text-green-800' : 'text-red-800'}">${index + 1}. ${question.title}
                </p>
                <p class="text-gray-700 text-sm mt-1">${question.question}</p>
                <div class="mt-2">
                  <p class="text-sm ${isCorrect ? 'text-green-600' : 'text-red-600'}">
                    Your answer: ${userAnswer !== null ? question.options[userAnswer] : 'Not answered'}
                    ${isCorrect ? '✓' : '✗'}
                  </p>
                  ${!isCorrect ? `<p class="text-sm text-green-600 mt-1">Correct answer: ${question.options[question.correctAnswer]}</p>` : ''}
                </div>
              `;

            resultDetails.appendChild(resultItem);
          });

          // Show results modal
          resultsModal.classList.remove('hidden');
        }

        // Calculate score
        function calculateScore() {
          return userAnswers.reduce((score, answer, index) => {
            return score + (answer === quizData[index].correctAnswer ? 1 : 0);
          }, 0);
        }

        // Event listeners
        prevBtn.addEventListener('click', goToPrevQuestion);
        nextBtn.addEventListener('click', goToNextQuestion);

        retryBtn.addEventListener('click', () => {
          userAnswers = new Array(quizData.length).fill(null);
          quizEnded = false;
          currentQuestionIndex = 0;
          displayQuestion(0);
          updateNavButtons();
          resultsModal.classList.add('hidden');
          quizStarted = false;
          startQuiz();
        });

        // Initialize quiz
        initializeQuiz();
      });
    </script>
    <% } %>
  </main>

  <!-- Footer -->
  <footer class="bg-white border-t mt-auto">
    <div class="container mx-auto px-6 py-4">
      <div class="flex flex-col md:flex-row items-center justify-between text-sm text-gray-600">
        <p>Crafted with ❤️ by Bhawani Shankar</p>
        <div class="flex space-x-4 mt-4 sm:mt-0">
          <a href="https://www.linkedin.com/in/bhawanitechdev/?originalSubdomain=in" target="_blank" class="hover:text-primary-600 cursor-pointer">
            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
              <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z" />
            </svg>
          </a>
          <a href="https://github.com/whitecodel/dsa-with-dart" target="_blank" class="hover:text-primary-600 cursor-pointer">
            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
            </svg>
          </a>
        </div>
      </div>
    </div>
  </footer>
</body>

</html>